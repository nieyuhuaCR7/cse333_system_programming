#include "Vector.h"
#include <iostream>

namespace vector333 {
  Vector::Vector() {
    data_ = new float[3];
    data_[0] = 0;
    data_[1] = 0;
    data_[2] = 0;
  }

  Vector::Vector(float x, float y, float z) {
    data_ = new float[3];
    data_[0] = x;
    data_[1] = y;
    data_[2] = z;
  }

  // implementation of copy constructor
  Vector::Vector(const Vector& other) {
    data_ = new float[3];
    data_[0] = other.data_[0];
    data_[1] = other.data_[1];
    data_[2] = other.data_[2];
  }

  // implementation of destructor
  Vector::~Vector(){
    delete[] data_;
  }

  // implementation of assignment operator
  Vector& Vector::operator=(const Vector& other){
    if (this != &other) {
      data_[0] = other.data_[0];
      data_[1] = other.data_[1];
      data_[2] = other.data_[2];
    }
    return *this;
  }

  // implementation of += operator
  Vector& Vector::operator+=(const Vector& other) {
    data_[0] += other.data_[0];
    data_[1] += other.data_[1];
    data_[2] += other.data_[2];
    return *this;
  }

  // implementation of -= operator
  Vector& Vector::operator-=(const Vector& other) {
    data_[0] -= other.data_[0];
    data_[1] -= other.data_[1];
    data_[2] -= other.data_[2];
    return *this;
  }

  // implementation of vector addition
  Vector operator+(const Vector u, const Vector v) {
    return Vector(u.data_[0] + v.data_[0], u.data_[1] + v.data_[1], u.data_[2] + v.data_[2]);
  }

  // implementation of vector substraction
  Vector operator-(const Vector u, const Vector v) {
    return Vector(u.data_[0] - v.data_[0], u.data_[1] - v.data_[1], u.data_[2] - v.data_[2]);
  }

  // implementation of vector dot product
  float operator*(const Vector u, const Vector v) {
    return u.data_[0] * v.data_[0] + u.data_[1] * v.data_[1] + u.data_[2] * v.data_[2];
  }

  // implementation of vector multiplication
  Vector operator*(const Vector u, const float number) {
    return Vector(number * u.data_[0], number * u.data_[1], number * u.data_[2]);
  }

  Vector operator*(const float number, const Vector u) {
    return Vector(number * u.data_[0], number * u.data_[1], number * u.data_[2]);
  }

  std::ostream& operator<<(std::ostream& os, const Vector& u) {
    os << "(" << u.data_[0] << "," << u.data_[1] << "," << u.data_[2] << ")";
    return os;

  }

  
}
